* Windows
** I. Prerequisites

This section describes the prerequisites for installing and configuring kons-9
on Windows 10; in other words, it describes what should already be installed
and configured before you start. Please check over the list of prerequisites and
make sure they're all installed and properly configred before you try to install
and use kons-9.

*** MSYS2

**** Install MSYS2
Go to MSYS2 installation page, and follow 3 sections namely I, II and III.
https://www.msys2.org/wiki/MSYS2-installation/

**** Try MSYS2
MSYS2 has several subsystems. After the installation of MSYS2 your Start menu
item MSYS2 64 will contain 5 subsystems. You can read more about them here:
https://www.msys2.org/wiki/MSYS2-introduction/

For our operations we will use MSYS2 MinGW x64. Pin it to some more convenient
location. Open your MSYS2 MinGW x64 and you will see a terminal window. From
now on I will call this window the Terminal.

At the terminal please enter ~pwd~ and press Enter. Your output will return
current directory that starts with ~/home/~ and will resemble the following.

#+begin_example
jacek@DESKTOP-M4FARGH MINGW64 ~
$ pwd
/home/jacek
#+end_example

*** Install git
Make sure git is installed running this in Terminal:

#+begin_example
pacman -S git
#+end_example

review your git settings
#+begin_example
git config --list --show-origin
#+end_example

and if needed

Then visit this page:
https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup
and find ~Your Identity~ section. There you will find example of setting your 2
most important git settings, that is your name and email.

*** SBCL
Visit sbcl page
https://www.sbcl.org/platform-table.html
and locate the green square at the bottom of the table with available ports that
corresponds to your Windows. Because most likely your processor architecture is
AMD64 the second square from the left will download the installer.

When I try to run the Installer I get the window that says
~Windows protected your PC~ with a button ~Don'tt run~ and an underlined text
saying ~More info~. Clicking on that underlined text will reveal a button that
says ~Run anyway~. Clicking it will run the installer.


Now you need to try the newly installed sbcl. Verify that sbcl was installed at
the expected location and try to find the sbcl version running the following
2 commands.

#+begin_example
jacek@DESKTOP-M4FARGH MINGW64 ~
$ ls /c/'Program Files'/'Steel Bank Common Lisp'/sbcl.exe
'/c/Program Files/Steel Bank Common Lisp/sbcl.exe'

jacek@DESKTOP-M4FARGH MINGW64 ~
$ /c/'Program Files'/'Steel Bank Common Lisp'/sbcl.exe --version
SBCL 2.2.10
#+end_example


*** Gnu Emacs
The use of Emacs is not needed in the examples that follow.

There are several editors that provide support for working with Common Lisp, but
by far the most commonly-used one is GNU Emacs. These instructions assume that
you know how to configure Emacs to your liking.

You can install Emacs in your Terminal using pacman. But the experience of using
Emacs installed using MSYS2 is not very pleasant because of poor speed possibly
caused by Windows Defender. I have seen alternative approach that is not so slow,
but is more complex to install and does not give easy access to programs
installed  with MSYS2. This Emacs related part is the area for improvement.

This page may be the answer
https://bjg.io/guide/cygwin-ad/

#+begin_example
pacman -S emacs
#+end_example

*** quicklisp
kons-9 relies on [[https://www.quicklisp.org/beta/][quicklisp]] to find and load dependencies, and these instructions
assume that you have it installed on your local system. The easiest way to
install quicklisp is to follow the [[https://www.quicklisp.org/beta/#installation][installation instructions]] at the quicklisp
home page.


*** Slime
Most Lispers want more than just text-editing support for working with Lisp. The
Superior Lisp Interaction Mode for Emacs (SLIME) is an Emacs package that
provides comprehensive support for running a Common Lisp implementation, sending
forms to it for evaluation, controlling its debugger, and generally making life
easier for Lisp programmers.

The easiest way to set up SLIME so that it works with quicklisp is to use
quicklisp to install it. These instructions assume that you followed the
instructions for installing quicklisp, as we discussed above.

Open a terminal window and run sbcl

#+begin_example
jacek@DESKTOP-M4FARGH MINGW64 ~
$ /c/'Program Files'/'Steel Bank Common Lisp'/sbcl.exe
This is SBCL 2.2.10, an implementation of ANSI Common Lisp.
More information about SBCL is available at <http://www.sbcl.org/>.

SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.

#+end_example

Use quicklisp to install swank. Following the star in the sbcl REPL
type ~(ql:quickload :swank)~ and if all goes well you will see a similar output.


#+begin_example
,* (ql:quickload :swank)
To load "swank":
  Load 1 ASDF system:
    asdf
  Install 1 Quicklisp release:
    slime
; Fetching #<URL "http://beta.quicklisp.org/archive/slime/2022-02-20/slime-v2.27.tgz">
; 803.72KB
==================================================
823,006 bytes in 0.21 seconds (3856.66KB/sec)
; Loading "swank"
[package swank-loader]............................
[package swank/backend]...........................
[package swank/rpc]...............................
[package swank/match].............................
[package swank-mop]...............................
[package swank]...................................
[package swank/source-path-parser]................
[package swank/source-file-cache].................
[package swank/sbcl]..............................
[package swank/gray]..............................
......
; compiling file "C:/msys64/home/jacek/quicklisp/dists/quicklisp/software/slime-v2.27/contrib/swank-util.lisp" (written 17 NOV 2022 04:44:36 AM):
.

; wrote C:/msys64/home/jacek/.slime/fasl/2.27/sbcl-2.2.10-win32-x86-64/contrib/swank-util.fasl
; compilation finished in 0:00:00.148
; compiling file "C:/msys64/home/jacek/quicklisp/dists/quicklisp/software/slime-v2.27/contrib/swank-repl.lisp" (written 17 NOV 2022 04:44:37 AM):
.....................some line are skipped ......................

; wrote C:/msys64/home/jacek/.slime/fasl/2.27/sbcl-2.2.10-win32-x86-64/contrib/swank-quicklisp.fasl
; compilation finished in 0:00:00.044

(:SWANK)
#+end_example

You can exit the sbcl repl typing ~(exit)~ after the star.

SBCL fetches SLIME and loads the SWANK package.

SLIME consists of two parts:

1. The SLIME package loads in Emacs and provides a user interface for Lisp.
2. The SWANK package loads into your Common Lisp implementation and provides communication features that enable SLIME to talk to it and control it.


*** GLFW
kons-9 currently depends on a development version of the GLFW library to create
windows and render scenes.

To search for installation candidates type

#+begin_example
pacman -Ss glfw
#+end_example

That will reveal 5 candidates for different MSYS2 subsystems. We assume the
mingw64 is the right choice for you.

You can grep to narrow down the version you want like this:

#+begin_example
$ pacman -Ss glfw | grep mingw64
mingw64/mingw-w64-x86_64-glfw 3.3.7-1
#+end_example

You can copy the package name ans paste if after the pacman command like this:
#+begin_example
$ pacman -S mingw64/mingw-w64-x86_64-glfw
#+end_example

If all has completed successfully then you're ready to install
and configure kons-9.

** II. Installation and configuration

*** Pull the code from Github
Use git to clone the development repo into local-projects:

#+begin_example
cd ~/quicklisp/local-projects/
git clone https://github.com/kaveh808/kons-9.git
#+end_example

*** first run
Start SBCL REPL

#+begin_example
/c/'Program Files'/'Steel Bank Common Lisp'/sbcl.exe
#+end_example

and run each line.

#+begin_example
(ql:quickload "kons-9")
(in-package :kons-9)
#+end_example

And run the code
#+begin_example
(run)
#+end_example

That should show a white window on which a 3D grid will appear. Pressing Tab on
your keyboard should show a menu. At the time of writing I do not know why there
is not text on menu in Windows version. Is it possible that we are missing a font?

file:~/Programming/langs/Lisp/kons-9/src/graphics/opengl/opengl.lisp::7
lists the font which is present on Windows file system.
